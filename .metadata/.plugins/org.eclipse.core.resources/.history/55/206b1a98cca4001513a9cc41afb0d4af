import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * "Controller" des Frames zum Anordnen der Logos.
 * 
 * @author Jnsness
 */

public class LogoFrame extends JFrame {

	private TimeCounter elapsedTime;
	private LogoFrameView dPanel;
	private JPanel buttonPanel;
	private JButton btnRedo;
	private JButton btnSave;
	public ArrayList<DraggableLogoComponent> logolist;
	public static DraggableLogoComponent YouLogo;

	/**
	 * Frame ist bewusst nicht resizable, damit letztliche Werte nicht
	 * verfälscht werden Zeit wird ab diesem Frame aufgenommen und später und
	 * bei Klick auf Weiter in DB geschrieben
	 * 
	 * LogoFrameView wird instanziiert
	 * 
	 * Shuffle-Button lässt Arraylist leeren, neu befüllen + YouLogo
	 * 
	 * Save-Button steuert Reihe von DB Zugriffen an und ruft nächsten Frame auf
	 * 
	 * @param uuid - wird über durch jeden Frame weitergegeben um DB Zugriffe zu verringern. Foreign Key jeder Tabelle
	 */
	public LogoFrame(String uuid) {

		logolist = new ArrayList<DraggableLogoComponent>();
		elapsedTime = new TimeCounter();
		getContentPane().setLayout(new BorderLayout());

		setVisible(true);
		setSize(1200, 900);
		setResizable(false);

		// Set Location to Location of previous Window
		setLocation(FormularWindow.frameLocation);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// dragPanel Configuration
		dPanel = new LogoFrameView();
		dPanel.setLayout(null);
		dPanel.setPreferredSize(new Dimension(900, 0));
		dPanel.setBorder(BorderFactory.createEtchedBorder());

		// buttonPanel Configuration

		buttonPanel = new JPanel();
		buttonPanel.setPreferredSize(new Dimension(290, 0));
		buttonPanel.setBorder(BorderFactory.createEtchedBorder());
		buttonPanel.setLayout(null);

		btnRedo = new JButton();
		btnRedo.setBounds(39, 819, 75, 41);
		btnRedo.setText("Shuffle");
		buttonPanel.add(btnRedo);

		btnRedo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				logolist.clear();
				loadLogos();
				loadYouImage();
			}
		});

		btnSave = new JButton();
		btnSave.setBounds(124, 818, 129, 42);
		btnSave.setText("Save and Next");
		buttonPanel.add(btnSave);

		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				setVisible(false);

				new DbAccess().DbSaveTimeData(uuid,
						elapsedTime.setEndTime(System.currentTimeMillis()));
				new DbAccess().DbSaveLogoData(uuid, logolist);
				new DbAccess().DbCalculateDistances(uuid);

				Point gravityPoint = new DbAccess()
						.DbCalculateCentreOfGravity(uuid);

				dPanel.setPaintControl(1);
				dPanel.setLogolist(logolist);
				dPanel.setGravityPoint(gravityPoint);

				new SnapShot().getSnapShot(dPanel, uuid);
				new DbAccess().DbCalculateAVGDistance(uuid);
				new DbAccess().DbCalculateAVGDistanceFromYou(uuid);
				new DbAccess().DbCalculateDistanceFromCentreOfGravity(uuid,
						gravityPoint);
				new ResultFrame(uuid);
			}
		});

		getContentPane().add(buttonPanel, BorderLayout.EAST);
		getContentPane().add(dPanel, BorderLayout.WEST);

		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				loadLogos();
				loadYouImage();
			}
		});
	}

	/**
	 * Wird automatisch als new Runnable aufgerufen leert dPanel und füllt
	 * daraufhin logolist (Arraylist) mit 10 Logos (for-Schleife) aus Kategorie
	 * des FormularWindow
	 */
	public void loadLogos() {
		dPanel.removeAll();

		// Array to give every image from folder

		String imageUrl = "images/" + FormularWindowView.getImageCategory();
		File f = new File(imageUrl);
		File[] fa = f.listFiles();

		for (int i = 0; i <= 9; i++) {
			String fileName = String.valueOf(fa[i]);
			addNewLogo(fileName);
		}

	}

	/**
	 * Instanziiert jedes mal ein DraggableLogoComponent, fügt dies der logoList
	 * hinzu, setzt das Bild aus der URL /Category/Filename.jpg, und randomized
	 * die Location sofern Aufruf über you_point passiert, wird Größe erhöht und
	 * logo wird der Klassen-Variable YouLogo zugewiesen
	 * 
	 * @param - Dateiname (URL /Category/Filename.jpg) aus Image-Ordner der jeweiligen Kategorie wird übergeben um dies als Name anzuhängen
	 */
	public void addNewLogo(String fileName) {
		Image img = Toolkit.getDefaultToolkit().createImage(fileName);

		DraggableLogoComponent logo = new DraggableLogoComponent(fileName);
		dPanel.add(logo);// Adds this component to main container

		logolist.add(logo);

		logo.setImage(img);
		logo.setAutoSize(true);
		logo.setOverbearing(true);

		logo.setSize(75, 75);

		logo.setLocation((int) (Math.random() * 830),
				(int) (Math.random() * 810));

		logo.calculateCenterPoint();

		dPanel.repaint();

		if (fileName.equals("images/you_point.png")) {
			YouLogo = logo;
			logo.setSize(125, 125);
		}

	}

	/**
	 * wird automatisch als new Runnable aufgerufen lädt das You Logo mit fester
	 * URL "images/you_point.png" Ruft einfach loadlogos mit dieser URL auf,
	 * daher wird Logo im Anschluss aus Arraylist wieder gelöscht = Grund
	 * hierfür ist, dass später Berechnung anhand der arraylist durchgeführt
	 * werden und eine sauberere Trennung der DB-Tabellen
	 */

	public void loadYouImage() {
		// Load "youLogo" | Personal image

		String urlYouLogo = "images/you_point.png";
		addNewLogo(urlYouLogo);

		// First added to logoList to benefit from Method "addnewLogo" functions
		// - then deleted it to not get written to DB with the arraylist
		logolist.remove(logolist.size() - 1);

	}

	/**
	 * Static Methode um YouLogo anderen Klassen bereitzustellen. Beispielsweise
	 * Speicherung in der DB
	 * 
	 * @return gibt YouLogo zurück
	 */
	public static DraggableLogoComponent getYouLogo() {
		return YouLogo;
	}

}